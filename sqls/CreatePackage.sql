CREATE OR REPLACE PACKAGE USER_MANAGEMENT AS
  PROCEDURE ADD_USER(USERLOGIN VARCHAR2, USERHASHPWD VARCHAR2, USERSALT VARCHAR2);
  PROCEDURE ALTER_USER_PWD_SALT (USERLOGIN IN VARCHAR2, PASSWD IN VARCHAR2, NEWPASS IN VARCHAR2,
  NEWSALT IN VARCHAR2, RESULT OUT NUMBER);
  PROCEDURE ADD_ROLE (ROLENAME IN VARCHAR2);
  PROCEDURE ALTER_ROLE (OLDROLENAME IN VARCHAR2, NEWROLENAME IN VARCHAR2, ROLEALTERED OUT NUMBER);
  PROCEDURE DROP_USER (ULogin in VARCHAR2, pwd IN VARCHAR2, Reslut OUT INT);
  PROCEDURE DROP_ROLE (Role IN VARCHAR2, Reslut OUT INT);  
  PROCEDURE SET_ROLE_TO_USER (UserLogin IN VARCHAR2, Role IN VARCHAR2, Result OUT INT);
  PROCEDURE REMOVE_ROLE_FROM_USER (UserLogin IN VARCHAR2, Role IN VARCHAR2, Result OUT INT);
  PROCEDURE CHECK_USER_ROLE (UserLogin IN VARCHAR2, Role IN VARCHAR2, Result OUT INT);
  PROCEDURE AUTH_USER (UserLogin IN VARCHAR2, PWD IN VARCHAR2, Result OUT int);
  FUNCTION consolidated_report (STARTDATE IN DATE, ENDDATE IN DATE, USERLOGIN VARCHAR2, ACTION VARCHAR2) RETURN SYS_REFCURSOR;
END USER_MANAGEMENT;
/
CREATE OR REPLACE PACKAGE BODY USER_MANAGEMENT AS
  PROCEDURE ADD_USER(USERLOGIN VARCHAR2, USERHASHPWD VARCHAR2, USERSALT VARCHAR2)
  AS
  BEGIN
  INSERT INTO USERS_DATA(LOGIN,HASHPWD,SALT, ID)
  VALUES(USERLOGIN, USERHASHPWD, USERSALT, USERS_DATA_SEQ.NEXTVAL);
  COMMIT;
  EXCEPTION
  WHEN  DUP_VAL_ON_INDEX THEN NULL;
  END;
  PROCEDURE ALTER_USER_PWD_SALT (USERLOGIN IN VARCHAR2, PASSWD IN VARCHAR2, NEWPASS IN VARCHAR2,
  NEWSALT IN VARCHAR2, RESULT OUT NUMBER)
AS 
BEGIN
  SELECT COUNT(*)     
    INTO RESULT
    FROM USERS_DATA ud   
  WHERE(ud.LOGIN = USERLOGIN)AND(ud.HASHPWD=PASSWD);

  IF RESULT <> 0 THEN
    UPDATE USERS_DATA
    SET HASHPWD=NEWPASS, SALT=NEWSALT
    WHERE(LOGIN = USERLOGIN)AND(HASHPWD=PASSWD);
END IF;
END;
  PROCEDURE ADD_ROLE (ROLENAME IN VARCHAR2)
  AS
  BEGIN
  INSERT INTO ROLES_DATA(ROLENAME, ID)
  VALUES(ROLENAME, ROLES_DATA_SEQ.NEXTVAL);
  COMMIT;
  EXCEPTION
  WHEN  DUP_VAL_ON_INDEX THEN NULL;
  END;
  PROCEDURE ALTER_ROLE (OLDROLENAME IN VARCHAR2, NEWROLENAME IN VARCHAR2, ROLEALTERED OUT NUMBER)
  AS
  BEGIN
  ROLEALTERED:=1;
  UPDATE ROLES_DATA
  SET ROLENAME = NEWROLENAME
  WHERE ROLENAME = OLDROLENAME;
    ROLEALTERED:= SQL%ROWCOUNT;
  END;
  PROCEDURE DROP_USER (ULogin in VARCHAR2, pwd IN VARCHAR2, Reslut OUT INT)
AS
BEGIN
DELETE FROM USERS_DATA
WHERE (LOGIN=ULogin)AND(HASHPWD=pwd);
Reslut:=SQL%ROWCOUNT;
END;
  PROCEDURE DROP_ROLE (Role IN VARCHAR2, Reslut OUT INT)
AS
BEGIN
DELETE FROM ROLES_DATA
WHERE ROLENAME=Role;
Reslut:=SQL%ROWCOUNT;
END;
  PROCEDURE SET_ROLE_TO_USER (UserLogin IN VARCHAR2, Role IN VARCHAR2, Result OUT INT)
AS
  VUSERID NUMBER;
  VROLEID NUMBER;
BEGIN
  SELECT ID
    INTO VUSERID
    FROM USERS_DATA ud
  WHERE ud.LOGIN = UserLogin;

  SELECT ID
    INTO VROLEID
    FROM ROLES_DATA rd
  WHERE rd.ROLENAME = Role;

  INSERT INTO USERS_ROLES(USERID, ROLEID)
    VALUES(VUSERID,VROLEID);

Result:=SQL%ROWCOUNT;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN Result:=0;  
  WHEN TOO_MANY_ROWS THEN Result:=0;
  WHEN  DUP_VAL_ON_INDEX THEN Result:=0;
END;
  PROCEDURE REMOVE_ROLE_FROM_USER (UserLogin IN VARCHAR2, Role IN VARCHAR2, Result OUT INT)
AS
  VUSERID NUMBER;
  VROLEID NUMBER;
BEGIN
  SELECT ID
    INTO VUSERID
    FROM USERS_DATA ud
  WHERE ud.LOGIN = UserLogin;

  SELECT ID
    INTO VROLEID
    FROM ROLES_DATA rd
  WHERE rd.ROLENAME = Role;

  DELETE FROM USERS_ROLES
   WHERE (USERID=VUSERID)AND(ROLEID=VROLEID);

Result:=SQL%ROWCOUNT;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN Result:=0;  
  WHEN TOO_MANY_ROWS THEN Result:=0;
END;
  PROCEDURE CHECK_USER_ROLE (UserLogin IN VARCHAR2, Role IN VARCHAR2, Result OUT INT)
AS
  VUSERID NUMBER;
  VROLEID NUMBER;
  LogMSG VARCHAR2(255);
BEGIN
  LogMSG:='Checking User role USER:'||UserLogin||' Role:'||Role||' ';

  SELECT ID
    INTO VUSERID
    FROM USERS_DATA ud
  WHERE ud.LOGIN = UserLogin;
  LogMSG := LogMSG||'User exists ';

  SELECT ID
    INTO VROLEID
    FROM ROLES_DATA rd
  WHERE rd.ROLENAME = Role;  
  LogMSG := LogMSG||'Role exists ';

  SELECT COUNT(*)
    INTO Result
    FROM USERS_ROLES ur
  WHERE (USERID=VUSERID)AND(ROLEID=VROLEID);
  
  LogMSG := LogMSG||'Result of pair search:'||Result;

  INSERT INTO ACTION_LOG (ACTION, TARGET,ACTIONUSER, ActionDesc, ActionDate)
  VALUES('CHECK_USER_ROLE','USERS_ROLES',UserLogin, LogMSG, SYSDATE);
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN Result:=0; LogMSG:= LogMSG||'NO_DATA_FOUND Exception. Exiting';
  INSERT INTO ACTION_LOG (ACTION, TARGET,ACTIONUSER, ActionDesc, ActionDate)
  VALUES('CHECK_USER_ROLE','USERS_ROLES',UserLogin, LogMSG, SYSDATE);  
  WHEN TOO_MANY_ROWS THEN Result:=0; LogMSG:= LogMSG||'TOO_MANY_ROWS Exception. Exiting';
  INSERT INTO ACTION_LOG (ACTION, TARGET,ACTIONUSER, ActionDesc, ActionDate)
  VALUES('CHECK_USER_ROLE','USERS_ROLES',UserLogin, LogMSG, SYSDATE);  
END;
  PROCEDURE AUTH_USER (UserLogin IN VARCHAR2, PWD IN VARCHAR2, Result OUT int)
AS
  VUSERID NUMBER;  
  LogMSG VARCHAR2(255);
BEGIN

  LogMSG:='Trying to authentificate user'||UserLogin||' pwd:'||PWD||' ';

  --Check that user is actualy has all that 
  SELECT ID
   INTO VUSERID
   FROM USERS_DATA ud
  WHERE (ud.LOGIN = UserLogin)AND(ud.HASHPWD=pwd);

 LogMSG := LogMSG||'User with this Login/pwd exists, Authorizating';

INSERT INTO USER_AUTHORIZATION(USERNAME, AUTHTIME)
      VALUES(UserLogin, SYSDATE);

    Result := SQL%ROWCOUNT;
  

  INSERT INTO ACTION_LOG (ACTION, TARGET,ACTIONUSER, ActionDesc, ActionDate)
  VALUES('CHECK_USER_ROLE','USERS_ROLES',UserLogin, LogMSG, SYSDATE);

  EXCEPTION
    WHEN NO_DATA_FOUND THEN Result:=0; 
 LogMSG := LogMSG||'There is no user with that login/pwd, exit';
  INSERT INTO ACTION_LOG (ACTION, TARGET,ACTIONUSER, ActionDesc, ActionDate)
  VALUES('CHECK_USER_ROLE','USERS_ROLES',UserLogin, LogMSG, SYSDATE);
END;
  FUNCTION consolidated_report (STARTDATE IN DATE, ENDDATE IN DATE, USERLOGIN VARCHAR2, ACTION VARCHAR2)
  RETURN SYS_REFCURSOR
AS
  DynStatement VARCHAR2(1000);
  RetVal SYS_REFCURSOR;
  Rcrd ACTION_LOG%ROWTYPE;
BEGIN
  DynStatement := 'SELECT *
                 FROM ACTION_LOG al
                 WHERE(1=1)';
  IF(STARTDATE IS NOT NULL) THEN
    DynStatement := DynStatement||'AND(al.ActionDate > :STARTDATE)';
    ELSE    
    DynStatement := DynStatement||'AND(:STARTDATE IS NULL)';
    END IF;
  IF(ENDDATE IS NOT NULL) THEN
    DynStatement := DynStatement||'AND(al.ActionDate < :ENDDATE)';
    ELSE    
    DynStatement := DynStatement||'AND(:ENDDATE IS NULL)';
    END IF;
  IF(USERLOGIN IS NOT NULL) THEN
    DynStatement := DynStatement||'AND(al.ACTIONUSER = :USERLOGIN)';
    ELSE    
    DynStatement := DynStatement||'AND(:USERLOGIN IS NULL)';
    END IF;
   IF(ACTION IS NOT NULL) THEN
    DynStatement := DynStatement||'AND(al.ACTION = :ACTION)';
    ELSE    
    DynStatement := DynStatement||'AND(:ACTION IS NULL)';
    END IF;
    OPEN RetVal FOR DynStatement USING STARTDATE, ENDDATE, USERLOGIN, ACTION;   
  RETURN RetVal;
END;
END USER_MANAGEMENT;